[Draft]
A decentralized protocol to track employees/people's attendance built on the Ethereum blockchain (and ipfs).

The user's interaction with the smart contract saves metadata.
    
Use Case: Employee check-in and check-out procedure (example: Before the housekeeper starts working on an apartement, she must scan the unique qr code attached behind the unit's door to check-in. and when she's done cleaning, she scans again to checkout.)

* user
    * address
    * role (erc721 poaptoken)
* contract
    * time (from block-epoch)
    * location (from qr code)
    * switch poaptoken; case employee_token ...; case admin_token ...; default ...
* App
    * timer function
    * (attach note to checkout call)
    
    
# POAP: Proof of Attendance Protocol

## Directory Sructure

POAP is dividided in the following applications/projects:

- **eth**: ZeppelinOS project with POAP Contracts
- **website**: Public website. Static website for poap
- **server**: POAP's api server. All server logic goes here
- **client**: React web application that represents the UI of the application. Uses _server_ as backend.

Other directories:

- **scripts**: utility scripts
- **db**: SQL Schema and dump for poap

## Architecture

POAP app is composed of:

- **POAP NFT Contract**. Ethereum smart contract that represents an NFT token. Each token represent a attestation of attendance
  to a given event. Thus, token holders can attest their attendance to events by holding tokens.
- **PostgresSQL DB**. Relational DB that maintains information about the events in POAP. New events can be added through the
  backoffice. It's currently deployed as a Google Cloud SQL database
- **Backend Server**. Node.js server backend. Provides an API to scan an address, claim a token, and backoffice administration tasks.
  Interacts with the database, and also with the smart contract.
- **Client**. React application, hosted in firebase. It provides a UI for claim, scan and the backoffice. All operations goes
  through the backend server API.


## How does a claim work?

Organizer mint non-transferable poap "role" token for his organization members to allow interaction with the attendance contract.

check-in steps:

1.  The user scans a qr code with the attendance app
2.  The client app, obtains the _location id_ and the _organization id_
3.  The client app, obtains the user's _address_ from the user's wallet (Metamask for example)
4.  The client app, post a check request to the blockscout.com account module api, in order to obtains the user's _poapTokenRole_ from the user's _address_ (https://blockscout.com/poa/xdai/api?module=account&action=tokenlist&address={user_address})
5.  The client app, calls the smart contract

## Deployed Contracts

Poap contract is already deployed in:

- **Ropsten** `0x50C5CA3e7f5566dA3Aa64eC687D283fdBEC2A2F2`
- **Mainnet** `0x22C1f6050E56d2876009903609a2cC3fEf83B415`

## Setup

## Initial Setup

### Install dependencies

    yarn install
    (cd server; yarn install)
    (cd client; yarn install)
    (cd eth; yarn install)

### Create Database & DBUser

You'll need a postgresDB database. Install postgresql and then:

```bash
sudo su - postgres             # Don't needed in Mac
createuser -s -W -P poap       # (enter poap as password)
createdb -O poap poap_dev      # dev database
createdb -O poap poap_test     # test database
logout                         # Don't needed in Mac
```

## Run the application

### Create & Populate local DB

on project's root:

    yarn db:reset

### Run Ganache

    yarn ganache

After each time you run ganache, you'll need to deploy contracts:

    yarn contracts:deploy:dev
    yarn contracts:migrate:dev # optional: to migrate current mainnet token holders

### configure .env

    copy env.txt file in /server/src/envs to /server
    replace the variables inside with yours

### Start Apps in Dev Mode

From root folder:

    yarn start:client
    yarn start:server

## Deployment

### Deploy to sokol (first time only)

    cd eth/
    Update zos.json contracts from Poap to XPoap
    npx zos session --network xdai --from 0xe583f95bF95d0883F94EfE844442C8bfc9dd7A7F --expires 3600
    npx zos push
    npx zos create XPoap --init initialize --args '"POAP","The Proof of Attendance Protocol","https://api.poap.xyz/metadata/",[]'

This was already done. The XPOAP Address is: `0x22C1f6050E56d2876009903609a2cC3fEf83B415`

### Deploy to ropsten (first time only)

    cd eth/
    npx zos session --network ropsten --from 0x79A560De1CD436d1D69896DDd8DcCb226f9Fa2fD --expires 3600
    npx zos push
    npx zos create Poap --init initialize --args '"POAP","The Proof of Attendance Protocol","https://api.poap.xyz/metadata/",[]'

This was already done. The POAP Address is: `0x50C5CA3e7f5566dA3Aa64eC687D283fdBEC2A2F2`

### Deploy to mainnet (first time only)

    cd eth/
    export POAP_MAIN_PK="<KEYHERE>"
    npx zos session --network mainnet --from 0xe583f95bF95d0883F94EfE844442C8bfc9dd7A7F --expires 3600
    npx zos push
    npx zos create Poap --init initialize --args '"POAP","The Proof of Attendance Protocol","https://api.poap.xyz/metadata/",[]'

This was already done. The POAP Address is: `0x22C1f6050E56d2876009903609a2cC3fEf83B415`

### Upgrade Contract logic

If you change contract logic and want to update it:

    # Make sure there is no running session for zos (check for existent eth/.zos.session )
    cd eth/
    npx zos session --network ropsten --from 0x79A560De1CD436d1D69896DDd8DcCb226f9Fa2fD --expires 3600
    npx zos push
    npx zos update Poap

### Deploy Website (firebase)

    cd website
    yarn deploy # Will build & run firebase deploy

### Deploy Client (firebase)

    cd client
    yarn deploy   # Will build & run firebase deploy

### Deploy Server (google app engine)

Prerequisites:

1.  Make sure you have the `app.yaml` in `server/`. This file is not in the github repository
2.  Make sure you have google-cloud-skd installed and in your \$PATH.
3.  Maker sure you have already run `gcloud init`

Steps:

    cd server/
    gcloud app deploy --verbosity=info


### Auth 0 DEV Env Configutarion
 for poap you have to create a 'SINGLE PAGE APLICATION' and an 'API' in auth0.

 then you have to set the following .env variables:
  - server:
    - AUTH0_APP_NAME= {it is the sub domain of the app url}
    - AUTH0_KID= {it is in the app description}
    - AUTH0_AUDIENCE= {it is the identifier in the API general settings}
  - client:
    - REACT_APP_AUTH0_DOMAIN={entire domain of the app}
    - REACT_APP_AUTH0_CLIENT_ID={client id of the SINGLE PAGE APP}
    - REACT_APP_AUTH0_AUDIENCE={same audience as server}

 also you have to create a rule: 
  - first you have to enable RBAC:
    - https://auth0.com/docs/dashboard/guides/apis/enable-rbac
  
    - then create the rule with this script code:

        ``` function (user, context, callback) {
        const namespace = 'https://poap.xyz';
        const assignedRoles = (context.authorization || {}).roles;

        let idTokenClaims = context.idToken || {};
        let accessTokenClaims = context.accessToken || {};

        idTokenClaims[`${namespace}/roles`] = assignedRoles;
        accessTokenClaims[`${namespace}/roles`] = assignedRoles;

        context.idToken = idTokenClaims;
        context.accessToken = accessTokenClaims;

        callback(null, user, context);
        }```

 create user roles in auth0 using the role 'UserRole' in /server/src/types.ts
